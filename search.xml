<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/hexomysite/2018/07/07/c/"/>
      <url>/hexomysite/2018/07/07/c/</url>
      <content type="html"><![CDATA[<blockquote><p>1.一段有意思的 C 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void fn()&#123;</span><br><span class="line">  int a[5];</span><br><span class="line">  int i;</span><br><span class="line"> printf(&quot;i的地址：%d\n&quot;, &amp;i);</span><br><span class="line">  for(i=5;i&gt;= -1;i--)&#123;</span><br><span class="line">    a[i] = 0;</span><br><span class="line">    printf(&quot;a[%d]的地址: %d\n &quot;,i,&amp;a[i] );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">  fn();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.效果</p></blockquote><blockquote><p><a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener"></a><br><img src="/hexomysite/2018/07/07/c/1.png" alt=""></p></blockquote><blockquote><p>3.解释<br>这里与栈的内存分配有关，在栈里，栈底到栈顶，内存地址是从高到低的。首先给数组 a 分配地址，从高到低 a[5]，a[4]…a[0]，紧跟着给 i 分配内存，所以在内存上看，a[0] 的地址和 i 是连着的，故当越界访问数组 a[-1] 时，实际上访问的是 i 。</p></blockquote><p>如上代码执行 a[-1] = 0; ，实际上执行的 i = 0; 。于是就跳不出 for 循环，产生了上图效果。</p><blockquote><p>4.其他<br>运行环境是 linux。有个小伙伴在服务器上跑，发现一个问题，当上面的代码没有 printf() 来打印 a[i] 的地址时，不会进入循环状态，非常奇怪。</p></blockquote><p>我之前没有 printf() 语句，也没有循环，然后我就想打印出地址查看一下是不是 a[-1] 没访问到 i，结果一执行就进入循环，我便没多想，抱着反正问题复现了，可能之前哪里写错了，那就这样吧的心态休息了…</p><p>没想到别人能敏锐地发现这两者之间的关联。致敬，学习。</p><p>想起高中的时候生物课上貌似讲过一个发现了一个什么现象但是没有执着去深入研究的生物学家，结果后来这个现象被别人研究并产出了重大的研究成果。</p><p>要注意细节呀。</p><blockquote><p>5.再来一段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void initialize()&#123;</span><br><span class="line">int a[12];</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;12;i++)&#123;</span><br><span class="line">a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void display()&#123;</span><br><span class="line">int a[12];</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;12;i++)&#123;</span><br><span class="line">printf(&quot;%d&quot;, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">initialize();</span><br><span class="line">display();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>效果<br> <a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener"></a><br><img src="/hexomysite/2018/07/07/c/2.png" alt=""></p></blockquote><blockquote><p>解释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">理论上第一次调用 initialize()，在栈里给数组分配了一块空间，调用完，该数组所在的空间就被销毁了。调用 display() 时，打印的应该是一些不可预料的值，但是这里却访问到了前一个函数里的东西。</span><br><span class="line"></span><br><span class="line">这里涉及到分配内存的方式。首先用户和系统共用一个堆栈指针（SP），调用第一个函数的时候，分配一块内存，sp 向上移动。但是在出函数的时候，所做的操作仅仅是 SP 回到之前的地址，中间的这块内存仍保存为 initialize() 函数执行后的模样。执行 display()，这个函数内申请的变量和前一次函数内的变量一致，变量在内存中的分配形式也一致。分配内存，SP移动，分配的仍是之前那块，初始值就是 initialize() 后的状态。</span><br><span class="line"></span><br><span class="line">即便 display() 改为：</span><br><span class="line"></span><br><span class="line">void display()&#123;</span><br><span class="line">int i;</span><br><span class="line">int a[12];</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">也不会达到上面的效果。</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/hexomysite/2018/06/23/hello-world/"/>
      <url>/hexomysite/2018/06/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
